<?php

declare(strict_types=1);

namespace App\Support\Auth\Passport\Grants;

use App\Support\Auth\Passport\Contracts\TokenRepositoryContract;
use Illuminate\Support\Arr;
use League\OAuth2\Server\Entities\ClientEntityInterface;
use League\OAuth2\Server\Exception\OAuthServerException;
use League\OAuth2\Server\Grant\RefreshTokenGrant;
use League\OAuth2\Server\RequestEvent;
use Psr\Http\Message\ServerRequestInterface;
use Throwable;

use function is_null;
use function is_string;
use function json_decode;

class InternalRefreshTokenGrant extends RefreshTokenGrant
{
    public function getIdentifier(): string
    {
        return 'internal_refresh_token';
    }

    protected function validateOldRefreshToken(ServerRequestInterface $request, $clientId)
    {
        $encryptedRefreshToken = $this->getRequestParameter('refresh_token', $request);
        if (! is_string($encryptedRefreshToken)) {
            throw OAuthServerException::invalidRequest('refresh_token');
        }

        // Validate refresh token
        try {
            $refreshToken = $this->decrypt($encryptedRefreshToken);
        } catch (Throwable $e) {
            throw OAuthServerException::invalidRefreshToken('Cannot decrypt the refresh token', $e);
        }

        $refreshTokenData = json_decode($refreshToken, true);

        $accessTokenId = Arr::get($refreshTokenData, 'access_token_id');
        if ($accessTokenId) {
            $tokenRepository = app(TokenRepositoryContract::class);
            $token           = $tokenRepository->findById($accessTokenId);

            if (is_null($token)) {
                throw OAuthServerException::accessDenied('Token not found');
            }

            if (! $token->otp_verified) {
                throw OAuthServerException::accessDenied('To use this action your token must be OTP verified');
            }
        }

        return parent::validateOldRefreshToken($request, $clientId); // TODO: Change the autogenerated stub
    }

    protected function validateClient(ServerRequestInterface $request): ClientEntityInterface
    {
        [$basicAuthUser] = $this->getBasicAuthCredentials($request);

        $clientId = $this->getRequestParameter('client_id', $request, $basicAuthUser);
        if (is_null($clientId)) {
            throw OAuthServerException::invalidRequest('client_id');
        }

        // Get client without validating secret
        $client = $this->clientRepository->getClientEntity($clientId);

        if ($client instanceof ClientEntityInterface === false) {
            $this->getEmitter()->emit(new RequestEvent(RequestEvent::CLIENT_AUTHENTICATION_FAILED, $request));
            throw OAuthServerException::invalidClient();
        }

        return $client;
    }
}
